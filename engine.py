import telebot
import os
import sys
import random
from telebot import types
import time
import datetime
import subprocess
import requests
import json
import bs4
import threading
import re
from concurrent.futures import ThreadPoolExecutor

token = input('–¢–æ–∫–µ–Ω: ')
bot = telebot.TeleBot(token)
SERVER_FOLDER = "server"
owner_id = int(input('ID —Ö–æ—Å—Ç–∞: '))
feedback = input('–Æ–∑–µ—Ä–Ω–µ–π–º —Ö–æ—Å—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è: ')
print('Online')
user_states = {}
msg = ['–ö–ª–∞—Å—Å!',
       "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ!",
       "–ö—Ä—É—Ç—ã—à–∫–∞)",
       "–ü–æ—Ç—Ä—è—Å–Ω–æ!",
       "–ú–æ–ª–æ–¥—á–∏–∫)",
       "–ê–π, —Ç–∏–≥—Ä",
       "–•–æ—Ä–æ—à",
       "–û–±–æ–∂–∞—é —Ç–µ–±—è!",
       "–ö—Ä–∞—Å–∞–≤—á–∏–∫!",
       "–î–µ—Ä–∂–∏",
       "–ó–∞—Ä–∞–±–æ—Ç–∞–ª",
       "–ó–∞—Å–ª—É–∂–∏–ª",
       "–†–∞–¥—É–µ—à—å)",
       "–í–∫—É—Å–Ω–æ)",
       "+–≤–∞–π–±",
       "WWW",
       "üëçüëçüëç",
       "–õ—é–±–∏–º—á–∏–∫ –º–æ–π)",
       "–£–º–Ω–∏—á–∫–∞",
       "–ó–≤–µ—Ä—å",
       "–ù—è–º))",
       "–í–æ—Ç—å))",
       "–¢—ã –º–æ—è –Ω—è—à–µ—á–∫–∞"]
poxvala_sticker = ['CAACAgIAAxkBAAENcahneRPJkY5-91dgyl6lr4J74-vL1gAClQ4AAn5ZsEhgAoeI2KwG7DYE',
                   'CAACAgIAAxkBAAENcbBneRlTgt6qPD2h4rHEZpvyj2TUbQACCg8AAk0asEjI15EXWF4YAjYE',
                   'CAACAgIAAxkBAAENcbJneRlkEDhC2A5VcGGP9yYWG3YQ3wACXRAAAjxhuEgZL3SNWga-szYE',
                   'CAACAgIAAxkBAAENcbRneRmUogsSBHNY8du5lttPf8TsHwACFhEAApmQuUiHWCroqnrwLTYE',
                   'CAACAgIAAxkBAAENcbZneRmiLs75ymnxwO-Uk4ifEBJUQAACVBMAAizTsUjkeE8ecGWFeTYE',
                   'CAACAgIAAxkBAAENcbhneRm0NWw1w5rfXwvAKec_7293VwACMBAAAiIVsUiXHAZ5ELI3nzYE',
                   'CAACAgIAAxkBAAENcbxneRnPU0eC8P1oyTsR_mowTAJVHgACVQ8AAuZxsEgGLY3e_ozgDjYE',
                   'CAACAgIAAxkBAAENcZlneRHV2SezS2sjd42laq1WpJ5SHgACdhMAAkQosEiQP6XGsWjHIzYE',
                   'CAACAgIAAxkBAAENccBneRoGTgXrFRrAA9jL5a_vjn2ijwADDQACSeqxSK64o_7HGLBKNgQ',
                   'CAACAgIAAxkBAAENccJneRoZ7GCgh1E9HHHaPik7UzjcegACDhAAAjKPuEhvodzj31eewjYE',
                   'CAACAgIAAxkBAAENccRneRoxqWtQA5TPS_zWZadgE_bXVwAC8hEAAgsSuUjGEEWdLi6rojYE',
                   'CAACAgIAAxkBAAENcZdneRHQq0V3xj6Fu7T9-MHmBJgOyAACYhEAAhd8sUhcpXuorJ8UMDYE',
                   'CAACAgIAAxkBAAENcelneSyAK2biZCkTENcd3jvNolthPwACpBAAAh07uUiDm-oHa_eVjTYE',
                   'CAACAgIAAxkBAAENcjJneV4Wyf4IJe56HIaK3ns_AAFFkyYAAkAQAALT7LhI0HcI7PH-fHs2BA']
user_last_send_time = {}
active_searches = {}
tip_msg = ['–ó–∞–≤–∞—Ä–∏ –∫–æ—Ñ–µ–µ–∫, —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞–¥–æ–ª–≥–æ ‚òï',
           '–õ–æ–≥–∏, –ª–æ–≥–∏, –¥–∞–Ω–Ω—ã–µ...',
           '–ü–æ–∫–∞ —è –∏—â—É, –º–æ–∂–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏...',
           '–ö–∞–∫ –∂–∏–∑–Ω—å?)',
           "–Ø —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à—É –∫–∞–∫ —á—Ç–æ –Ω–∞–π–¥—É",
           "–°—á–∏—Ç–∞–µ—à—å —Å–µ–±—è –¥–æ–∫—Å–µ—Ä–æ–º? –ê –∫—Ç–æ –µ—â–µ —Ç–∞–∫ —Å—á–∏—Ç–∞–µ—Ç?",
           "–ò–¥–∏ –ø–æ–¥–µ–ª–∞–π —É—Ä–æ–∫–∏ –ø–æ–∫–∞)",
           "–ú–¥–∞, —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–º–Ω–æ–≥–æ –¥–æ–ª—å—à–µ —á–µ–º –æ–±—ã—á–Ω–æ"]

def check_user_id(user_id):
    try:
        with open('server/obscure-db.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if str(user_id) in line:
                    return True
    except FileNotFoundError:
        pass
    return False

def check_contact_exists(phone):
    try:
        with open('server/obscure-db.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if f'{phone}' in line:
                    return True
    except FileNotFoundError:
        pass
    return False

def check_premium_status(user_id):
    try:
        with open('premium.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if str(user_id) in line:
                    return "üëë True"
    except FileNotFoundError:
        pass
    return "None"

def get_balance(user_id):
    try:
        with open('user_balance.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if str(user_id) in line:
                    return int(line.split()[1])
    except FileNotFoundError:
        pass
    return 0

def update_balance(user_id, balance):
    try:
        with open('user_balance.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
    except FileNotFoundError:
        lines = []

    with open('user_balance.txt', 'w', encoding='utf-8') as file:
        for line in lines:
            if str(user_id) in line:
                file.write(f'{user_id} {balance}\n')
            else:
                file.write(line)
        if not any(str(user_id) in line for line in lines):
            file.write(f'{user_id} {balance}\n')

def is_user_banned(user_id):
    try:
        with open('banned.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if str(user_id) in line:
                    return True
    except FileNotFoundError:
        pass
    return False

def check_exceptions(query):
    try:
        with open('exceptions.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if str(query) in line:
                    return True
    except FileNotFoundError:
        pass
    return False

@bot.message_handler(commands=['fr'])
def balance_message(message):
    user_id = message.from_user.id
    global owner_id
    if user_id == owner_id:
        bot.send_message(message.from_user.id, '‚ïí')
        bot.send_message(message.from_user.id, '‚ïû')
        bot.send_message(message.from_user.id, '‚ïò')
    else:
        return
    
@bot.message_handler(commands=['balance'])
def balance_message(message):
    user_id = message.from_user.id
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω—É–ª–µ–Ω.')
        return
    if not check_user_id(user_id):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ.', reply_markup=markup)
    balance = get_balance(user_id)
    bot.send_message(message.from_user.id, f'ID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance}‚≠ê')

def send_query(query, user_id):
    global tip_msg
    start_time = time.time()
    balance = get_balance(user_id)
    cost_per_match = 2

    if balance < cost_per_match:
        bot.send_message(chat_id=user_id, text="üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        sticker_id = "CAACAgIAAxkBAAENcdhneSNs7mRxDaonQe66OYtXpr14uwACdxAAAjYxuUipiV8LHjyI8zYE"
        bot.send_sticker(user_id, sticker_id)
        return

    if len(query) < 6:
        bot.send_message(chat_id=user_id, text="üö´ –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.")
        sticker_id = "CAACAgIAAxkBAAENcclneRq0vz6p1AvCnFNZ6R2252Im7wACGREAArsyuUi7Sgs7Em4O8DYE"
        bot.send_sticker(user_id, sticker_id)
        return

    if check_exceptions(query):
        bot.send_message(chat_id=user_id, text="üõë –ü–æ –Ω–µ–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        sticker_id = "CAACAgIAAxkBAAENcYtneRBIIejqzFnhsKyOYlhCQEHH3QACZQ8AAm8QsUjWO5BQXrE91jYE"
        bot.send_sticker(user_id, sticker_id)
        return

    results, media_results = search_files(query, user_id)

    if not results and not media_results:
        bot.send_message(chat_id=user_id, text="üôà –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        sticker_id = "CAACAgIAAxkBAAENcYtneRBIIejqzFnhsKyOYlhCQEHH3QACZQ8AAm8QsUjWO5BQXrE91jYE"
        bot.send_sticker(user_id, sticker_id)
        return

    max_matches = min(balance // cost_per_match, len(results) + len(media_results))
    bot.send_message(chat_id=user_id, text=f"üëÅÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {max_matches}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for i in range(min(max_matches, len(results))):
        result = results[i]
        parts = re.split(r'[/|]', result['line_content'])
        formatted_line = '\n'.join(parts)
        max_length = 4000
        if len(formatted_line) > max_length:
            chunks = [formatted_line[i:i + max_length] for i in range(0, len(formatted_line), max_length)]
            for chunk in chunks:
                bot.send_message(
                    chat_id=user_id,
                    text=f"‚ïí File: {result['file']}\n‚ïû Path: {result['path']}\n‚ïû Line: {result['line_number']}\n‚ïò Content (chunk):\n\n{chunk}"
                )
                time.sleep(1)
        else:
            bot.send_message(
                chat_id=user_id,
                text=f"‚ïí File: {result['file']}\n‚ïû Path: {result['path']}\n‚ïû Line: {result['line_number']}\n‚ïò Content:\n\n{formatted_line}"
            )
            time.sleep(1)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    for i in range(max_matches - len(results)):
        if i < len(media_results):
            file_path = media_results[i]
            file_name = os.path.basename(file_path)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_info_message = f"‚ïí File: {file_name}\n‚ïû Path: {file_path}\n‚ïò Sending media file..."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ
            bot.send_message(chat_id=user_id, text=file_info_message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
            try:
                if file_path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif')):
                    with open(file_path, 'rb') as photo:
                        bot.send_photo(chat_id=user_id, photo=photo)
                elif file_path.lower().endswith(('.mp4', '.avi')):
                    with open(file_path, 'rb') as video:
                        bot.send_video(chat_id=user_id, video=video)
                elif file_path.lower().endswith(('.mp3', '.wav')):
                    with open(file_path, 'rb') as audio:
                        bot.send_audio(chat_id=user_id, audio=audio)

                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    reduce = max_matches * cost_per_match
    update_balance(user_id, balance - reduce)
    bot.send_message(user_id, f"–°–ø–∏—Å–∞–Ω–∏–µ -{reduce}‚≠ê")
    sticker_id = "CAACAgIAAxkBAAENcZNneRExyAE0-4rlmTSxScNqowqU5wACOQ4AAqC4uEhG_YXC59BTIzYE"
    bot.send_sticker(user_id, sticker_id)

def search_files(query, user_id):
    results = []
    media_results = []
    encodings = ['utf-8', 'latin-1', 'cp1252']
    media_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.mp4', '.avi', '.mp3', '.wav']

    # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
    for root, dirs, files in os.walk(SERVER_FOLDER):
        for file in files:
            file_path = os.path.join(root, file)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            if file.lower().endswith(('.txt', '.log', '.csv', '.doc', '.docx', '.xlsx', '.json', '.svb')):  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                for encoding in encodings:
                    try:
                        with open(file_path, 'r', encoding=encoding) as f:
                            for line_number, line in enumerate(f, start=1):
                                if query.lower() in line.lower():
                                    results.append({
                                        "file": file,
                                        "path": file_path,
                                        "line_number": line_number,
                                        "line_content": line.strip()
                                    })
                        break
                    except UnicodeDecodeError:
                        continue
                    except Exception as e:
                        print(f"üòµ ReadFileError {file_path}: {e}")
                        break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            if query.lower() in file.lower() and any(file.lower().endswith(ext) for ext in media_extensions):
                media_results.append(file_path)

    return results, media_results

@bot.message_handler(commands=['help'])
def help_message(message):
    global feedback
    user_id = message.from_user.id
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –ü–æ–º–æ—â—å? –ê –æ–Ω–∞ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç?')
        return
    if not check_user_id(user_id):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ, –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å.', reply_markup=markup)
        sticker_id = "CAACAgIAAxkBAAENcY1neRCfWAQbnZVbh8w_DAMyCUoAATkAAjsOAAL8KrhIGj-4RJJg-Qc2BA"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    bot.send_message(message.from_user.id, f'''
üîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - 79002004505
–ê–π–ø–∏ –∞–¥—Ä–µ—Å - 0.0.0.0
–¢–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ - 1234567890
–ò–º—è - –ê–ª–∏—à–µ—Ä
–Æ–∑–µ—Ä–Ω–µ–π–º - @example_username
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã - 1234567887654321

üé´ –£—Å–ª—É–≥–∏:
–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ì–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É -2‚≠ê
IPGeoLocation —Ç—É–ª -1‚≠ê
–°–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ -329‚≠ê

‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥:
–ö–æ–Ω—Ç–∞–∫—Ç +8‚≠ê
–ü—Ä–æ—á–∞—è –≤–∞–ª–∏–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è +10‚≠ê ~ +100‚≠ê
üëÅÔ∏è‚Äçüó®Ô∏è –û–±–ª–∞–¥–∞—Ç–µ–ª–∏ –ü—Ä–µ–º–∏—É–º–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç 500‚≠ê

‚ùï –õ—é–±–∞—è –ø–æ—Å—Ç—É–ø–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é:
‚ö†Ô∏è –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è/–ù–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ –¥–æ–∫–æ–≤ -5‚≠ê
‚õî –ï—Å–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç—É–ø–∞–µ—Ç –¥–µ—Ä—å–º–æ - –ø–µ—Ä–º–∞–Ω–µ—Ç–Ω—ã–π –ë–ê–ù.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: {feedback}''')

@bot.message_handler(commands=['donate'])
def user_info_message(message):
    global feedback
    user_id = message.from_user.id
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –°–æ–±–∏—Ä–∞–µ—à—å—Å—è –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω?')
        return
    if not check_user_id(user_id):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–ú–æ–∂–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–µ–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞?', reply_markup=markup)
        sticker_id = "CAACAgIAAxkBAAENcY1neRCfWAQbnZVbh8w_DAMyCUoAATkAAjsOAAL8KrhIGj-4RJJg-Qc2BA"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    bot.send_message(message.from_user.id, f'–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: {feedback}')
    
@bot.message_handler(commands=['my_info'])
def user_info_message(message):
    global owner_id
    user_id = message.from_user.id
    if not check_user_id(user_id):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–ö—Ç–æ —Ç—ã?', reply_markup=markup)
        return
    moders = []
    try:
        with open('moders.txt', 'r', encoding='utf-8') as file:
            for line in file:
                moders.append(int(line.strip()))
    except FileNotFoundError:
        pass
    if user_id == owner_id:
        status = 'owner'
    elif user_id in moders:
        status = 'moderator'
    else:
        status = 'user'
    if is_user_banned(user_id):
        status = 'BANNED'
        update_balance(user_id, 0)
    name = message.from_user.first_name
    balance = get_balance(user_id)
    premium_status = check_premium_status(user_id)
    bot.send_message(message.from_user.id, f'‚ïí Name: {name}\n‚ïû ID: {user_id}\n‚ïû –ë–∞–ª–∞–Ω—Å: {balance}‚≠ê\n‚ïû Status: {status}\n‚ïò Premium: {premium_status}')
    
@bot.message_handler(commands=['share'])
def share_message(message):
    user_id = message.from_user.id
    if active_searches.get(user_id, False):
        a = bot.send_message(message.from_user.id, "üîç –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫..")
        bot.pin_chat_message(user_id, a.message_id)
        sticker_id = "CAACAgIAAxkBAAENcaxneRcWxfLsPGhp0rxLGZmqrzpZXQACTA8AAig6sEiGytjCw_r7ZzYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        return
    if not check_user_id(user_id):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ.', reply_markup=markup)
        sticker_id = "CAACAgIAAxkBAAENcY1neRCfWAQbnZVbh8w_DAMyCUoAATkAAjsOAAL8KrhIGj-4RJJg-Qc2BA"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    last_send_time = user_last_send_time.get(user_id, 0)
    current_time = time.time()
    if current_time - last_send_time < 86400:
        remaining_time = int(86400 - (current_time - last_send_time))
        hours = remaining_time // 3600
        minutes = (remaining_time % 3600) // 60
        bot.send_message(message.from_user.id, f"–í–Ω–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç.")
        sticker_id = "CAACAgIAAxkBAAENcY9neRDQFNwTEZff3YcUd0S8rdcp0QACRxAAApAxsEgpkCt5BkG2ujYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    user_states[user_id] = True
    bot.send_message(message.from_user.id, '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤—Å—é –∏–º–µ—é—â—É—é—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ñ–æ—Ç–∫–∏, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–µ–∫—Å—Ç –∏ —Ç.–¥.)\n–ù–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∑–∞—Ç–µ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞–ø–∏—à–∏ –∞–±–æ—Ä—Ç...')
    bot.register_next_step_handler(message, share_info)

@bot.message_handler(commands=['tools'])
def tool_message(message):
    user_id = message.from_user.id
    if active_searches.get(user_id, False):
        a = bot.send_message(message.from_user.id, "üîç –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫..")
        bot.pin_chat_message(user_id, a.message_id)
        sticker_id = "CAACAgIAAxkBAAENcaxneRcWxfLsPGhp0rxLGZmqrzpZXQACTA8AAig6sEiGytjCw_r7ZzYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
        return
    if not check_user_id(user_id):
        update_balance(user_id, 0)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', reply_markup=markup)
        return
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button1 = types.KeyboardButton(text="‚öôÔ∏è IPGeoLocation")
    button2 = types.KeyboardButton(text="‚öôÔ∏è Obscure Implementer")
    button3 = types.KeyboardButton(text="ü•∑ –°—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ")
    button4 = types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button4)
    toolmsg = bot.send_message(message.from_user.id, "üß∞ –í—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=markup)
    sticker_id = "CAACAgIAAxkBAAENcjZneV6Uhh1P5f8Kgcs_6GR6LZrW-QAC0RIAAlYquUhxtFuq2H_r5zYE"
    sticker = bot.send_sticker(message.from_user.id, sticker_id)
    bot.register_next_step_handler(message, tool_handler, toolmsg, sticker)
    
def tool_handler(message, toolmsg, sticker):
    global owner_id
    user_id = message.from_user.id
    balance = get_balance(user_id)
    bot.delete_message(user_id, toolmsg.message_id)
    bot.delete_message(user_id, sticker.message_id)
    if message.text == '‚öôÔ∏è IPGeoLocation':
        if balance < 1:
            bot.send_message(chat_id=user_id, text="üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            sticker_id = "CAACAgIAAxkBAAENcdhneSNs7mRxDaonQe66OYtXpr14uwACdxAAAjYxuUipiV8LHjyI8zYE"
            bot.send_sticker(user_id, sticker_id)
            return
        bot.send_message(message.from_user.id, "‚öôÔ∏è –í—ã–±—Ä–∞–Ω IPGeoLocation —Ç—É–ª.\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞–ø–∏—à–∏ –∞–±–æ—Ä—Ç...")
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ IP –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, ip_geo_location)
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, 'üòä –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å.')
        sticker_id = "CAACAgIAAxkBAAENcaJneRLeFucNm_UqGRrvO0rHNbTDdAACgxAAAv-IuEgmnSDE-AvTOTYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        if user_id == owner_id:
            bot.send_message(message.from_user.id, '''
OWNER PANEL
/give_ban - –í—ã–¥–∞—Ç—å –±–∞–Ω
/give_premium - –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º
/add_moder - –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/gift - –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã
/reduce - –°–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã
/send_to_all - –†–∞—Å—Å—ã–ª–∫–∞
/add_string - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –ë–î
/add_media - –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –≤ –ë–î
/fr - –§—Ä–µ–π–º—ã''')
    elif message.text == '‚öôÔ∏è Obscure Implementer':
        msg = bot.send_message(message.from_user.id, "‚öôÔ∏è –°–µ–∫—É–Ω–¥—É...")
        file_path = 'Obscure-Implementer.zip'
        try:
            with open(file_path, 'rb') as file:
                bot.send_document(user_id, file, caption='https://github.com/AKVRI/Obscure-Implementer')
        except Exception as e:
            bot.send_message(message.from_user.id, "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        bot.delete_message(user_id, msg.message_id)    
    elif message.text == 'ü•∑ –°—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ':
        if balance < 329:
            bot.send_message(chat_id=user_id, text="üò¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–ª—è —Å–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 329‚≠ê")
            sticker_id = "CAACAgIAAxkBAAENceBneSWhEyBzI6Bgyrsd5Yk58p271QAClA4AAmpwsEiLvN8wLPe3-zYE"
            bot.send_sticker(user_id, sticker_id)
            return
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button1 = types.KeyboardButton(text="üëç –î–∞")
        button2 = types.KeyboardButton(text="üëé –ù–µ—Ç")
        markup.add(button1, button2)
        msg = bot.send_message(message.from_user.id, "ü•∑ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å—Ç–µ—Ä—Ç—ã –∏ –Ω–µ —Å–º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î —Å–Ω–æ–≤–∞. –£—Å–ª—É–≥–∞ —Å—Ç–æ–∏—Ç 329‚≠ê. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=markup)
        bot.register_next_step_handler(message, hide_data, msg)
    else:
        bot.send_message(message.from_user.id, 'üòä –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å.')
        sticker_id = "CAACAgIAAxkBAAENcaJneRLeFucNm_UqGRrvO0rHNbTDdAACgxAAAv-IuEgmnSDE-AvTOTYE"
        bot.send_sticker(message.from_user.id, sticker_id)

def hide_data(message, msg):
    user_id = message.from_user.id
    if message.text == 'üëç –î–∞':
        bot.delete_message(user_id, msg.message_id)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button1 = types.KeyboardButton(text="ü•∑ –°—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", request_contact=True)
        markup.add(button1)
        bot.send_message(user_id, '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –º–µ–Ω—é.', reply_markup=markup)
        bot.register_next_step_handler(message, hide_contact)
    elif message.text == 'üëé –ù–µ—Ç':
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.from_user.id, '–æ–∫–µ', reply_markup=markup)
        sticker_id = "CAACAgIAAxkBAAENcaZneROCme9rEftT7vvXm5Y4JTms1AACgREAAs9ZuEiQUL5pwX8kyjYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    else:
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.from_user.id, 'üòä –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å.', reply_markup=markup)
        sticker_id = "CAACAgIAAxkBAAENcaJneRLeFucNm_UqGRrvO0rHNbTDdAACgxAAAv-IuEgmnSDE-AvTOTYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    
def ip_geo_location(message):
    user_id = message.from_user.id
    if message.text.lower() == '–∞–±–æ—Ä—Ç':
        bot.send_message(message.from_user.id, '–æ–∫–µ')
        sticker_id = "CAACAgIAAxkBAAENcaZneROCme9rEftT7vvXm5Y4JTms1AACgREAAs9ZuEiQUL5pwX8kyjYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    ip = message.text
    balance = get_balance(user_id)
    try:
        result = subprocess.check_output(['python', 'IPGeoLocation/ipgeolocation.py', '-t', ip]).decode('utf-8')
        bot.send_message(message.from_user.id, result)
        reduce = 1
        update_balance(user_id, balance - reduce)
        bot.send_message(user_id, f"–°–ø–∏—Å–∞–Ω–∏–µ -{reduce}‚≠ê")
        sticker_id = "CAACAgIAAxkBAAENcZNneRExyAE0-4rlmTSxScNqowqU5wACOQ4AAqC4uEhG_YXC59BTIzYE"
        bot.send_sticker(user_id, sticker_id)
    except Exception as e:
        bot.send_message(message.from_user.id, f'–£–ø—Å! {e}')
    
@bot.message_handler(commands=['start'])
def start_message(message):
    global owner_id
    user_id = message.from_user.id
    if active_searches.get(user_id, False):
        a = bot.send_message(message.from_user.id, "üîç –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫..")
        bot.pin_chat_message(user_id, a.message_id)
        sticker_id = "CAACAgIAAxkBAAENcaxneRcWxfLsPGhp0rxLGZmqrzpZXQACTA8AAig6sEiGytjCw_r7ZzYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –ü–æ –Ω–µ–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∑–∞–ø—Ä–µ—â–µ–Ω.')
        return
    if not check_user_id(user_id):
        update_balance(user_id, 0)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
        markup.add(contact_button)
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç? –Ø —Ç–µ–±—è –Ω–µ —É–∑–Ω–∞—é, –º—ã –∑–Ω–∞–∫–æ–º—ã?', reply_markup=markup)
        sticker_id = "CAACAgIAAxkBAAENcY1neRCfWAQbnZVbh8w_DAMyCUoAATkAAjsOAAL8KrhIGj-4RJJg-Qc2BA"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    else:
        bot.send_message(message.from_user.id, 'üòä –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å.')
        sticker_id = "CAACAgIAAxkBAAENcaJneRLeFucNm_UqGRrvO0rHNbTDdAACgxAAAv-IuEgmnSDE-AvTOTYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        if user_id == owner_id:
            bot.send_message(message.from_user.id, '''
OWNER PANEL
/give_ban - –í—ã–¥–∞—Ç—å –±–∞–Ω
/give_premium - –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º
/add_moder - –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/gift - –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã
/reduce - –°–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã
/send_to_all - –†–∞—Å—Å—ã–ª–∫–∞
/add_string - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –ë–î
/add_media - –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –≤ –ë–î
/fr - –§—Ä–µ–π–º—ã''')

def ban_user(user_id):
    with open('banned.txt', 'a', encoding='utf-8') as file:
        file.write(f'{user_id}\n')
        
def premium(user_id):
    with open('premium.txt', 'a', encoding='utf-8') as file:
        file.write(f'{user_id}\n')
        
def add_moder(user_id):
    with open('moders.txt', 'a', encoding='utf-8') as file:
        file.write(f'{user_id}\n')

@bot.message_handler(commands=['add_string'])
def add_string(message):
    global owner_id
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(message.from_user.id, 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    bot.send_message(message.from_user.id, '–î–æ–±–∞–≤—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –±–∞–∑—É (—Å–∏–º–≤–æ–ª / | - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Enter):')
    bot.register_next_step_handler(message, add_string_to)

def add_string_to(message):
    text = message.text
    if message.text and message.text.lower() == '–∞–±–æ—Ä—Ç':
        bot.send_message(message.from_user.id, '–æ–∫–µ')
        sticker_id = "CAACAgIAAxkBAAENcaZneROCme9rEftT7vvXm5Y4JTms1AACgREAAs9ZuEiQUL5pwX8kyjYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    new_string = message.text
    try:
        with open('server/obscure-db.txt', 'r', encoding='utf-8') as file:
            lines = file.readlines()
    except FileNotFoundError:
        lines = []
    with open('server/obscure-db.txt', 'w', encoding='utf-8') as file:
        file.write(new_string + '\n')
        for line in lines:
            file.write(line)
    bot.send_message(message.from_user.id, '+–¥–∞–Ω–Ω—ã–µ!')
    sticker_id = "CAACAgIAAxkBAAENccBneRoGTgXrFRrAA9jL5a_vjn2ijwADDQACSeqxSK64o_7HGLBKNgQ"
    bot.send_sticker(message.from_user.id, sticker_id)
    
@bot.message_handler(commands=['add_media'])
def add_media(message):
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(user_id, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏ –∏–º—è —Ñ–∞–π–ª–∞ (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º), –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:")
    bot.register_next_step_handler(message, process_file_name)

def process_file_name(message):
    user_id = message.from_user.id
    file_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
    if not file_name:
        bot.send_message(user_id, "üö´ Fatal.")
        return

    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤ –ë–î:")
    bot.register_next_step_handler(message, save_media_file, file_name)

def save_media_file(message, file_name):
    user_id = message.from_user.id
    file_path = os.path.join(SERVER_FOLDER, file_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(user_id, f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    elif message.content_type == 'video':
        file_info = bot.get_file(message.video.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(user_id, f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(user_id, f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(user_id, f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    else:
        bot.send_message(user_id, "üö´ –û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
    
@bot.message_handler(commands=['send_to_all'])
def send_to_all(message):
    global owner_id
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(message.from_user.id, 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    bot.register_next_step_handler(message, send_to_all_message)

def send_to_all_message(message):
    text = message.text
    if message.text and message.text.lower() == '–∞–±–æ—Ä—Ç':
        bot.send_message(message.from_user.id, '–æ–∫–µ')
        sticker_id = "CAACAgIAAxkBAAENcaZneROCme9rEftT7vvXm5Y4JTms1AACgREAAs9ZuEiQUL5pwX8kyjYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    try:
        with open('user_balance.txt', 'r', encoding='utf-8') as file:
            users = file.readlines()
    except FileNotFoundError:
        return
    for user in users:
        user_id = int(user.split()[0])
        try:
            if message.text:
                bot.send_message(user_id, f"{message.text}\n\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            elif message.photo:
                bot.send_photo(user_id, message.photo[-1].file_id, caption=f"{message.text}\n\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            elif message.video:
                bot.send_video(user_id, message.video.file_id, caption=f"{message.text}\n\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            elif message.document:
                bot.send_document(user_id, message.document.file_id, caption=f"{message.text}\n\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            elif message.audio:
                bot.send_audio(user_id, message.audio.file_id, caption=f"{message.text}\n\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        except Exception as e:
            bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}')
            time.sleep(1)
    bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞.')

@bot.message_handler(commands=['reduce'])
def reduce_stars(message):
    global owner_id
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(message.from_user.id, 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, star_num_reduce)

def star_num_reduce(message):
    try:
        receiver = int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.')
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:')
    bot.register_next_step_handler(message, lambda msg: process_reduce_stars(msg, receiver))

def process_reduce_stars(message, receiver):
    try:
        stars = int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        return
    balance = get_balance(receiver)
    if stars > balance:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å, –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å.')
        return
    update_balance(receiver, get_balance(receiver) - stars)
    bot.send_message(message.from_user.id, f'–°–ø–∏—Å–∞–Ω–æ {stars}‚≠ê —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receiver}.')
    try:
        bot.send_message(receiver, f'–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:')
        bot.send_message(receiver, f'-{stars}‚≠ê')
        sticker_id = 'CAACAgIAAxkBAAENceBneSWhEyBzI6Bgyrsd5Yk58p271QAClA4AAmpwsEiLvN8wLPe3-zYE'
        bot.send_sticker(receiver, sticker_id)
    except Exception as e:
        bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞: {e}')

@bot.message_handler(commands=['gift'])
def give_stars(message):
    global owner_id
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(message.from_user.id, 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, star_num_gift)

def star_num_gift(message):
    try:
        receiver = int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.')
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:')
    bot.register_next_step_handler(message, lambda msg: process_give_stars(msg, receiver))

def process_give_stars(message, receiver):
    global msg
    try:
        stars = int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        return
    update_balance(receiver, get_balance(receiver) + stars)
    bot.send_message(message.from_user.id, f'–ù–∞—á–∏—Å–ª–µ–Ω–æ {stars}‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver}.')
    poxvala = random.choice(msg)
    try:
        bot.send_message(receiver, f'üéÅ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:')
        bot.send_message(receiver, f'{poxvala} +{stars}‚≠ê')
        sticker_id = random.choice(poxvala_sticker)
        bot.send_sticker(receiver, sticker_id)
    except Exception as e:
        bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞: {e}')
    
@bot.message_handler(commands=['give_ban'])
def give_ban(message):
    global owner_id
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(message.from_user.id, 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, process_ban_user)

@bot.message_handler(commands=['give_premium'])
def give_premium(message):
    global owner_id
    user_id = message.from_user.id
    if user_id != owner_id:
        bot.send_message(message.from_user.id, 'üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, prem_user)
    
def prem_user(message):
    try:
        user_prem = int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.')
        return
    premium(user_prem)
    bot.send_message(message.from_user.id, f'üëë –í—ã–¥–∞–ª –ø—Ä–µ–º–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_prem}.')
    try:
        bot.send_message(user_prem, 'üëë –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–µ–±–µ –≤—ã–¥–∞–ª–∏ –ø—Ä–µ–º–∫—É!')
        sticker_id = "CAACAgIAAxkBAAENcZlneRHV2SezS2sjd42laq1WpJ5SHgACdhMAAkQosEiQP6XGsWjHIzYE"
        bot.send_sticker(user_prem, sticker_id)
        update_balance(user_prem, get_balance(user_prem) + 500)
        bot.send_message(user_prem, '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ +500‚≠ê')
    except Exception as e:
        bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞: {e}')
    
def process_ban_user(message):
    try:
        user_to_ban = int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.')
        return
    ban_user(user_to_ban)
    bot.send_message(message.from_user.id, f'‚úã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_ban} –∑–∞–±–∞–Ω–µ–Ω.')
    try:
        bot.send_message(user_to_ban, 'üö´ –£–ø—Å... –ë–ê–ù! –¢—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–∞–∑–æ–π. –ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —á—Ç–æ –ë–ê–ù –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω, —Å–≤—è–∂–∏—Å—å —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.')
        sticker_id = "CAACAgIAAxkBAAENcZVneRFQ6Am6Xlb5fajXHhfBTomCSwACIw8AAmHBuUj4raDZBZXApzYE"
        bot.send_sticker(user_to_ban, sticker_id)
    except Exception as e:
        bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞: {e}')

def hide_contact(message):
    user_id = message.from_user.id
    markup = types.ReplyKeyboardRemove()
    if message.contact:
        contact = message.contact
        name = contact.first_name or "---"
        lastname = contact.last_name or "---"
        user_id = contact.user_id or "---"
        user = bot.get_chat(contact.user_id)
        username = user.username or "---"
        phone = contact.phone_number
        with open('exceptions.txt', 'a', encoding='utf-8') as file:
            file.write(f'{name} {lastname} @{username} {user_id} {phone}\n')
        msg = bot.send_message(message.from_user.id, '–†–∞–±–æ—Ç–∞–µ–º...', reply_markup=markup)
        time.sleep(1)
        bot.delete_message(user_id, msg.message_id)
        bot.send_message(message.from_user.id, '–ï—Å—Ç—å! –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.')
        balance = get_balance(user_id)
        reduce = 329
        update_balance(user_id, balance - reduce)
        bot.send_message(user_id, f"–°–ø–∏—Å–∞–Ω–∏–µ -{reduce}‚≠ê")
        sticker_id = "CAACAgIAAxkBAAENcZNneRExyAE0-4rlmTSxScNqowqU5wACOQ4AAqC4uEhG_YXC59BTIzYE"
        bot.send_sticker(user_id, sticker_id)
    else:
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.from_user.id, 'üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.', reply_markup=markup)
        return
    
@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    global poxvala_sticker
    global msg
    global owner_id
    giver_id = message.from_user.id
    giver_username = message.from_user.username
    giver_name = message.from_user.first_name
    contact = message.contact
    if check_contact_exists(contact.phone_number):
        bot.send_message(message.from_user.id, '‚úã –ù–æ–º–µ—Ä —É–∂–µ –≤ –±–∞–∑–µ.')
        sticker_id = "CAACAgIAAxkBAAENcdZneSMIP1tHQUImb1z2Pv1cyWievwACEw8AAmrksUj-IGawpgwPhDYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    name = contact.first_name or "---"
    lastname = contact.last_name or "---"
    user_id = contact.user_id or "---"
    user = bot.get_chat(contact.user_id)
    username = user.username or "---"
    phone = contact.phone_number
    if check_exceptions(phone):
        bot.send_message(chat_id=giver_id, text="üõë –î–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞—â–∏—â–µ–Ω.")
        bot.send_message(user_id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {giver_name} @{giver_username} {giver_id} –ø—ã—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É.")
        sticker_id = "CAACAgIAAxkBAAENdD5ne-hDGR_ao2h2wWF7zwpCS5YG7wACuw0AAsXdsEiP7t2Z4f08gzYE"
        bot.send_sticker(user_id, sticker_id)
        return
    if check_exceptions(username):
        bot.send_message(chat_id=giver_id, text="üõë –î–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞—â–∏—â–µ–Ω.")
        bot.send_message(user_id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {giver_name} @{giver_username} {giver_id} –ø—ã—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É.")
        sticker_id = "CAACAgIAAxkBAAENdD5ne-hDGR_ao2h2wWF7zwpCS5YG7wACuw0AAsXdsEiP7t2Z4f08gzYE"
        bot.send_sticker(user_id, sticker_id)
        return
    if check_exceptions(name):
        bot.send_message(chat_id=giver_id, text="üõë –î–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞—â–∏—â–µ–Ω.")
        bot.send_message(user_id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {giver_name} @{giver_username} {giver_id} –ø—ã—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É.")
        sticker_id = "CAACAgIAAxkBAAENdD5ne-hDGR_ao2h2wWF7zwpCS5YG7wACuw0AAsXdsEiP7t2Z4f08gzYE"
        bot.send_sticker(user_id, sticker_id)
        return
    with open('server/obscure-db.txt', 'a', encoding='utf-8') as file:
        file.write(f'‚ïí Name: {name}/‚ïû Last Name: {lastname}/‚ïû Username: @{username}/‚ïû ID: {user_id}/‚ïò Phone: {phone}\n')
    markup = types.ReplyKeyboardRemove()
    poxvala = random.choice(msg)
    receiver = message.from_user.id
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –Ω–µ–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.')
        return
    update_balance(receiver, get_balance(receiver) + 8)
    bot.send_message(message.from_user.id, f'{poxvala} +8‚≠ê', reply_markup=markup)
    sticker_id = random.choice(poxvala_sticker)
    sticker = bot.send_sticker(message.from_user.id, sticker_id)

def animate_message(user_id, message_id):
    global owner_id
    try:
        while True:
            emoji = ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü•∏', 'ü§©', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ',
                     'üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂', 'ü´ë', 'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê', 'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 'üå≠', 'üçî', 'üçü', 'üçï', 'ü´ì', 'ü•™', 'ü•ô', 'üßÜ', 'üåÆ', 'üåØ', 'ü´î', 'ü•ó', 'ü•ò', 'ü´ï', 'ü•´', 'üçù', 'üçú', 'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'ü¶™', 'üç§', 'üçô', 'üçö', 'üçò', 'üç•', 'ü•†', 'ü•Æ', 'üç¢', 'üç°', 'üçß', 'üç®', 'üç¶', 'ü•ß', 'üßÅ', 'üç∞', 'üéÇ', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™', 'üå∞', 'ü•ú', 'ü´ò', 'üçØ', 'ü•õ', 'üçº', 'ü´ñ', '‚òïÔ∏è', 'üçµ', 'üßÉ', 'ü•§', 'üç∂', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üßâ', 
                     'üçæ', 'üßä', 'ü•Ñ', 'üç¥', 'üçΩ', 'ü•£', 'ü•°', 'ü•¢', 'üçï', 'üçî', 'üå≠', 'üçü', 'üçó', 'üçñ', 'üçù', 'üçú', 'üç≤', 'üç£', 'üç±', 'üç§', 'üçô', 'üçö', 'üçò', 'üç•', 'üç¶', 'üç®', 'üçß', 'üç∞', 'üéÇ', 'üçÆ', 'üç≠', 'üç¨', 'üç´', 'üçø', 'üç©', 'üç™', 'üå∞', 'ü•ú', 'ü´ò', 'üçØ', 'ü•õ', 'üçº', 'ü´ñ', '‚òïÔ∏è', 'üçµ', 'üßÉ', 'ü•§', 'üç∂', 'üç∫', 'üçª', 'ü•Ç', 'üç∑', 'ü•É', 'üç∏', 'üçπ', 'üßâ', 'üçæ', 'üßä', 'üì±', 'üíª', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üì∫', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üìº', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'üßØ', 'üß∞', 'üß≤', 'üß™', 'üß´', 'üß¨', 'üî¨', 'üî≠', 'üì°', 'üõ∞', 'üöÄ', '‚öì', '‚õµ', 'üõ≥Ô∏è', 'üö¢', '‚úàÔ∏è', 'üõ©Ô∏è', 'üõ´', 'üõ¨', 'üöÅ', 'üöÇ', 'üöÜ', 'üöÑ', 'üöÖ', 'üöà', 'üöä', 'üöâ', 'üöè', 'üöå', 'üöç', 'üöô', 'üöó', 'üöï', 'üöñ', 'üöò', 'üö≤', 'üõ¥', 'üõµ', 'üõπ', 'üöè', 'üõ∂', '‚õ∑Ô∏è', 
                     'üèÇ', 'üèçÔ∏è', 'üõµ', 'üö®', 'üöî', 'üöç', 'üöò', 'üöñ', 'üöó', 'üöô', 'üöå', 'üöé', 'üöè', 'üö¶', 'üöß', '‚ö†Ô∏è', 'üîû', 'üîë', 'üóùÔ∏è', 'üîí', 'üîì', 'üß≥', 'üíº', 'üì¶', 'üìÆ', 'üì¨', 'üì≠', 'üì´', 'üì™', 'üìà', 'üìâ', 'üìä', 'üìã', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üóÇÔ∏è', 'üìÅ', 'üìÇ', 'üìë', 'üìä', 'üìà', 'üìâ', 'üìú', 'üìÉ', 'üìÑ', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üóÇÔ∏è', 'üìÅ', 'üìÇ', 'üìë', 'üìä', 'üìà', 'üìâ', 'üìú', 'üìÉ', 'üìÑ', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üóÇÔ∏è', 'üìÅ', 'üìÇ', 'üìë', 'üìä', 'üìà', 'üìâ', 'üìú', 'üìÉ', 'üìÑ', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üóÇÔ∏è', 'üìÅ', 'üìÇ', 'üìë', 'üìä', 'üìà', 'üìâ', 'üìú', 'üìÉ', 'üìÑ', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóëÔ∏è', 'üóÇÔ∏è', 'üìÅ', 'üìÇ', 'üìë', 'üìä', 'üìà', 'üìâ', 'üìú', 'üìÉ', 'üìÑ', 'üìÖ']
            frames = [f'üîç –ü–æ–∏—Å–∫... {random.choice(emoji)}', 
                      f'üîç –ü–æ–∏—Å–∫... {random.choice(emoji)}{random.choice(emoji)}', 
                      f'üîç –ü–æ–∏—Å–∫... {random.choice(emoji)}{random.choice(emoji)}{random.choice(emoji)}']
            for frame in frames:
                bot.edit_message_text(chat_id=user_id, message_id=message_id, text=frame)
                time.sleep(2)
    except Exception as e:
        pass
    
def random_msg(user_id):
    global tip_msg
    msg = random.choice(tip_msg)
    try:
        while True:
            time.sleep(30)
            rmsg = bot.send_message(user_id, msg)
            time.sleep(180)
            bot.delete_message(user_id, rmsg.message_id)
    except Exception as e:
        pass

@bot.message_handler(content_types=['text'])
def search_message(message):
    global tip_msg
    user_id = message.from_user.id
    if active_searches.get(user_id, False):
        a = bot.send_message(message.from_user.id, "üîç –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫..")
        bot.pin_chat_message(user_id, a.message_id)
        sticker_id = "CAACAgIAAxkBAAENcaxneRcWxfLsPGhp0rxLGZmqrzpZXQACTA8AAig6sEiGytjCw_r7ZzYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        return
    if is_user_banned(user_id):
        bot.send_message(message.from_user.id, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
        return
    if not check_user_id(user_id):
        if message.content_type == 'text':
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            contact_button = types.KeyboardButton(text="‚ü° –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ü°", request_contact=True)
            markup.add(contact_button)
            bot.send_message(message.from_user.id, '–Ø —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é... –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞.', reply_markup=markup)
            sticker_id = "CAACAgIAAxkBAAENcY1neRCfWAQbnZVbh8w_DAMyCUoAATkAAjsOAAL8KrhIGj-4RJJg-Qc2BA"
            bot.send_sticker(message.from_user.id, sticker_id)
            return
    else:
        
        active_searches[user_id] = True
        wait = bot.send_message(message.from_user.id, 'üîç –ü–æ–∏—Å–∫...')
        wait_id = wait.message_id
        anim = threading.Thread(target=animate_message, args=(user_id, wait_id))
        anim.start()
        query = message.text
        if not query or query.startswith('/'):
            bot.delete_message(chat_id=message.from_user.id, message_id=wait.message_id)
            bot.send_message(message.from_user.id, 'üö´ –ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.')
            sticker_id = "CAACAgIAAxkBAAENcclneRq0vz6p1AvCnFNZ6R2252Im7wACGREAArsyuUi7Sgs7Em4O8DYE"
            sticker = bot.send_sticker(message.from_user.id, sticker_id)
            active_searches[user_id] = False
            return
        with ThreadPoolExecutor() as executor:
            executor.submit(send_query, query, user_id)
        bot.delete_message(chat_id=message.from_user.id, message_id=wait.message_id)
        active_searches[user_id] = False

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'audio']) 
def share_info(message):
    global owner_id
    user_id = message.from_user.id
    if user_id in user_states and user_states[user_id]:
        pass
    else:
        return
    if message.text and message.text.lower() == '–∞–±–æ—Ä—Ç':
        bot.send_message(message.from_user.id, '–æ–∫–µ')
        sticker_id = "CAACAgIAAxkBAAENcaZneROCme9rEftT7vvXm5Y4JTms1AACgREAAs9ZuEiQUL5pwX8kyjYE"
        bot.send_sticker(message.from_user.id, sticker_id)
        user_states.pop(user_id, None)
        return
    if message.text:
        if check_exceptions(message.text):
            bot.send_message(message.from_user.id, 'üõë –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è.')
            user_states.pop(user_id, None)
            return
    user_last_send_time[user_id] = time.time()
    moders = []
    try:
        with open('moders.txt', 'r', encoding='utf-8') as file:
            for line in file:
                moders.append(int(line.strip()))
    except FileNotFoundError:
        pass
    name = message.from_user.first_name or "---"
    bot.send_message(owner_id, f'‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} {message.from_user.id}:')
    bot.forward_message(chat_id=owner_id, from_chat_id=user_id, message_id=message.id)
    for moder in moders:
        bot.send_message(moder, f'‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} {message.from_user.id}:')
        bot.forward_message(chat_id=moder, from_chat_id=user_id, message_id=message.id)
    bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ï—Å–ª–∏ –∏–Ω—Ñ–∞ –ø–æ–ª–µ–∑–Ω–∞, —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ)')
    sticker_id = "CAACAgIAAxkBAAENcahneRPJkY5-91dgyl6lr4J74-vL1gAClQ4AAn5ZsEhgAoeI2KwG7DYE"
    bot.send_sticker(message.from_user.id, sticker_id)
    user_states.pop(user_id, None)
    return

if __name__ == '__main__':
    try:
        bot.polling()
    except Exception as e:
        print(e)